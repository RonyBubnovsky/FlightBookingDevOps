name: Flight Booking CI/CD Pipeline

# Trigger the workflow on push or pull request to both production and stage branches
on:
  push:
    branches:
      - production
      - stage
  pull_request:
    branches:
      - production
      - stage

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Step 3: Install backend dependencies (before Docker setup)
      - name: Install backend dependencies
        working-directory: ./flight-booking-backend
        run: npm install

      # Step 4: Set up MongoDB Atlas connection string
      - name: Set up MongoDB Atlas connection string
        run: echo "MONGODB_URI=mongodb+srv://ronybubnovsky:dLJgXWD3YpqPDqBG@flightbooking.4cfj2.mongodb.net/?retryWrites=true&w=majority&appName=FlightBooking" >> $GITHUB_ENV

      # Step 5: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.19.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 6: Cleanup previous containers (stop and remove existing containers)
      - name: Cleanup previous containers
        run: |
          docker-compose down || true
          docker ps -a -q | xargs docker stop || true
          docker ps -a -q | xargs docker rm || true

      # Step 7: Set up Docker Buildx (to use Docker compose)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 8: Build and run Docker Compose for backend
      - name: Build and Run Backend with Docker Compose
        working-directory: ./flight-booking-backend
        run: |
          docker-compose up -d --build
        env:
          MONGODB_URI: mongodb+srv://ronybubnovsky:dLJgXWD3YpqPDqBG@flightbooking.4cfj2.mongodb.net/?retryWrites=true&w=majority&appName=FlightBooking

      # Step 9: Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./flight-booking-frontend
        run: npm install

      # Step 10: Start frontend server in the background
      - name: Start frontend server
        working-directory: ./flight-booking-frontend
        run: npm start &

      # Step 11: Wait for frontend server to be ready (5 seconds)
      - name: Wait for frontend server to be ready
        run: sleep 5

      # Step 12: Run Cypress tests in headless mode
      - name: Run Cypress Tests
        working-directory: ./flight-booking-frontend
        run: npx cypress run
        env:
          CYPRESS_BASE_URL: http://localhost:3000

      # Step 13: Upload Cypress Test Results (optional)
      - name: Upload Cypress Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-results
          path: ./flight-booking-frontend/cypress/videos

      # Step 14: Run backend tests after backend is up
      - name: Run backend tests
        working-directory: ./flight-booking-backend
        run: |
          npm test

      # Step 15: Tear down Docker services
      - name: Tear Down Docker Compose
        working-directory: ./flight-booking-backend
        run: docker-compose down

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production' || github.event.pull_request.base.ref == 'production'

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Deploy Backend to Render
      - name: Deploy Backend to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"serviceId": "srv-csnt6k23esus73ei0ucg"}' \
          https://api.render.com/v1/services/srv-csnt6k23esus73ei0ucg/deploys

      # Step 3: Deploy Frontend to Render
      - name: Deploy Frontend to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{"serviceId": "srv-csnte5dumphs7387oaig"}' \
          https://api.render.com/v1/services/srv-csnte5dumphs7387oaig/deploys
