name: Flight Booking CI Pipeline

# Trigger the workflow on push or pull requests
on:
  push:
    branches:
      - staging
      - main
  pull_request:
    branches:
      - staging
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Step 3: Verify Node.js Installation
      - name: Verify Node.js installation
        run: |
          node -v
          npm -v

      # Step 4: Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./flight-booking-backend
        run: npm install

      # Step 5: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.19.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 6: Cleanup previous containers (stop and remove existing containers)
      - name: Cleanup previous containers
        run: |
          docker-compose -f ./docker-compose.yml down || true
          docker ps -a -q | xargs docker stop || true
          docker ps -a -q | xargs docker rm || true

      # Step 7: Set up Docker Buildx (to use Docker compose)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 8: Build and Run Docker Compose for backend and PostgreSQL
      - name: Build and Run Backend with Docker Compose
        run: |
          docker-compose -f ./docker-compose.yml down || true
          docker-compose -f ./docker-compose.yml up -d --build
          chmod +x ./wait-for-it.sh
          ./wait-for-it.sh localhost 3001

      # Step 9: Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./flight-booking-frontend
        run: npm install

      # Step 10: Start frontend server in the background
      - name: Start frontend server
        working-directory: ./flight-booking-frontend
        run: npm start &

      # Step 11: Run backend tests
      - name: Run Backend Tests
        working-directory: ./flight-booking-backend
        run: npm test

      # Step 12: Run Cypress tests (frontend testing)
      - name: Run Cypress Tests
        working-directory: ./flight-booking-frontend
        run: npx cypress run

      # Step 13: Tear down Docker services
      - name: Tear Down Docker Compose
        working-directory: ./flight-booking-backend
        run: docker-compose -f ./docker-compose.yml down

      # Step 14: Trigger Render Deployment for Backend (Replace with your webhook URL)
      - name: Trigger Backend Deployment on Render
        run: |
          curl -X POST https://flightbookingdevops-w89y.onrender.com

      # Step 15: Trigger Render Deployment for Frontend (Replace with your webhook URL)
      - name: Trigger Frontend Deployment on Render
        run: |
          curl -X POST https://flightbookingdevops-frontend.onrender.com
