name: Flight Booking CI Pipeline

on:
  push:
    branches: [stage, production]
  pull_request:
    branches: [stage, production]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Cache dependencies
      - name: Cache backend dependencies
        uses: actions/cache@v3
        with:
          path: ./flight-booking-backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('./flight-booking-backend/package-lock.json') }}

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: ./flight-booking-frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('./flight-booking-frontend/package-lock.json') }}

      - name: Install backend dependencies
        working-directory: ./flight-booking-backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./flight-booking-frontend
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Run Backend with Docker Compose
        working-directory: ./flight-booking-backend
        env:
          DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
        run: |
          docker-compose down --remove-orphans
          docker-compose up -d --build
          ./wait-for-it.sh localhost:3001 -t 60

      - name: Start frontend server and wait for readiness
        working-directory: ./flight-booking-frontend
        run: |
          npm start &
          ./wait-for-it.sh localhost:3000 -t 30

      - name: Run Backend Tests
        working-directory: ./flight-booking-backend
        env:
          DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
          NODE_ENV: test
        run: npm test

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./flight-booking-frontend
          wait-on: "http://localhost:3000"
          wait-on-timeout: 120
          browser: chrome
          record: false

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            ./flight-booking-frontend/cypress/videos
            ./flight-booking-frontend/cypress/screenshots
            ./flight-booking-backend/coverage

      - name: Cleanup
        if: always()
        working-directory: ./flight-booking-backend
        run: docker-compose down --remove-orphans
