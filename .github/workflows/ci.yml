name: CI Pipeline

on:
  push:
    branches: [PostgreSQLbranch]
  pull_request:
    branches: [PostgreSQLbranch]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js for backend
      - name: Set up Node.js for backend
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Step 3: Install frontend dependencies
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./flight-booking-frontend

      # Step 4: Set up PostgreSQL container
      - name: Start PostgreSQL container
        run: |
          docker pull postgres:15-alpine
          docker run --name postgres-container -e POSTGRES_USER=myuser -e POSTGRES_PASSWORD=mysecurepassword -e POSTGRES_DB=flightbooking -p 5432:5432 -d postgres:15-alpine
        continue-on-error: true

      # Step 5: Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to start..."
          for i in {1..10}; do
            if docker exec postgres-container pg_isready -U myuser; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting..."
            sleep 5
          done

      # Step 6: Build backend Docker image
      - name: Build backend Docker image
        run: |
          docker build -t flight-booking-backend ./flight-booking-backend

      # Step 7: Start backend container
      - name: Start backend container
        run: |
          docker run --name backend-container --link postgres-container -e DB_USER=myuser -e DB_PASSWORD=mysecurepassword -e DB_NAME=flightbooking -e DB_HOST=postgres-container -p 3001:3001 -d flight-booking-backend

      # Step 8: Wait for backend to be fully up
      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to start..."
          for i in {1..10}; do
            if curl -s http://localhost:3001/health; then
              echo "Backend is ready!"
              break
            fi
            echo "Waiting..."
            sleep 5
          done

      # Step 9: Start frontend application
      - name: Start frontend application
        run: npm start &
        working-directory: ./flight-booking-frontend

      # Step 10: Run Cypress tests
      - name: Run Cypress tests
        working-directory: ./flight-booking-frontend
        run: npx cypress run

      # Step 11: Clean up containers
      - name: Clean up Docker containers
        run: |
          docker stop backend-container postgres-container
          docker rm backend-container postgres-container
          docker system prune -f
