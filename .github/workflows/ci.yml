name: Flight Booking CI Pipeline

# Trigger the workflow on push or pull request to both main and stage branches
on:
  push:
    branches:
      - main
      - stage
  pull_request:
    branches:
      - main
      - stage

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.2
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [20.x] # Using Node.js version 20

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
       - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './flight-booking-frontend/package-lock.json'

      # Step 3: Install backend dependencies (before Docker setup)
      - name: Install backend dependencies
        working-directory: ./flight-booking-backend
        run: npm install

      # Step 4: Set up Docker Buildx (to use Docker compose)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 6: Build and run Docker Compose for backend
      - name: Build and Run Backend with Docker Compose
        working-directory: ./flight-booking-backend
        run: |
          docker-compose up -d
        env:
          MONGO_URI: mongodb://localhost:27017/flightbooking

      # Step 7: Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./flight-booking-frontend
        run: npm install

      # Step 8: Start frontend server in the background
      - name: Start frontend server
        working-directory: ./flight-booking-frontend
        run: npm start &

      # Step 9: Wait for the frontend to be fully ready (20 seconds)
      - name: Wait for frontend server to be ready
        run: sleep 20

      # Step 10: Run Cypress tests in headless mode
      - name: Run Cypress Tests
        working-directory: ./flight-booking-frontend
        run: npx cypress run
        env:
          CYPRESS_BASE_URL: http://localhost:3000

      # Step 11: Upload Cypress Test Results (optional)
      - name: Upload Cypress Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-results
          path: ./flight-booking-frontend/cypress/videos

      # Step 12: Tear down Docker services
      - name: Tear Down Docker Compose
        working-directory: ./flight-booking-backend
        run: docker-compose down
